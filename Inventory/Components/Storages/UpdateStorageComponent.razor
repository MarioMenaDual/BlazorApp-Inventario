@using Entities
@using Business

@inject NavigationManager NavManager

<div>
    <EditForm Model="oStorage">

        <div class="form-group">
            <label>Fecha:</label>
            <InputDate @bind-Value="oStorage.LastUpdate" class="form-control" />
        </div>

        <div class="form-group">
            <label>Cantidad parcial:</label>
            <InputNumber @bind-Value="oStorage.PartialQuantity" class="form-control" />
        </div>
        <div class="form-group">
            <label>Producto:</label>
            <InputSelect @bind-Value="oStorage.ProductId" class="form-control">
                @foreach (var product in products)
                {
<option value="@product.ProductId">@product.ProductName</option>}
            </InputSelect>
        </div>


        <div class="form-group">
            <label>Almacen:</label>
            <InputSelect @bind-Value="oStorage.WarehouseId" class="form-control">
                @foreach (var warehouse in warehouses)
                {
<option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>}
            </InputSelect>
        </div>

        <input type="button" value="Actualizar Almacenamiento" @onclick="UpdateStorage" />
    </EditForm>
</div>

@code { 
    [Parameter]
    public string IdStorage { get; set; }

    StorageEntity oStorage = new StorageEntity();
    List<ProductEntity> products = new List<ProductEntity>();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();

    protected override async Task OnInitializedAsync()
    {
        products = B_Product.ProductList();
        warehouses = B_Warehouse.WarehouseList();
        oStorage = B_Storage.StorageById(IdStorage);
    }

    private void UpdateStorage()
    {
        B_Storage.UpdateStorage(oStorage);
        NavManager.NavigateTo("storage/list");

    } }
