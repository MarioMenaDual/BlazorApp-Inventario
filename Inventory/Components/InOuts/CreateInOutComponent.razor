@using Entities
@using Business

@inject NavigationManager NavManager


    <div class="form-group">
        <select class="form-control" @onchange="OnChangedWareHouse">
            <option value="">Seleccione una bodega...</option>
            @foreach(var warehouse in warehouses)
            {
                <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
            }
        </select>
    </div>
    
<hr />
<EditForm Model="oInOut">
    <div class="form-group">
        <label>Producto</label>
        <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
            <option>Seleccione producto...</option>
            @foreach (var storage in storages)
            {
<option value="@storage.StorageId">@storage.Product.ProductName</option>}
        </InputSelect>
    </div>



    <div class="form-group">
        <label>Cantidad</label>
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity" />
    </div>
    <div class="form-group">
        <label>Es un ingreso</label>
        <InputCheckbox class="form-control" @bind-Value="oInOut.IsInput" />
    </div>
    <div>
        <input type="button" value="@buttonValue" @onclick="SaveInOut" class="form-control btn btn-warning" />
    </div>
</EditForm>
<div class="text-center h4">
    @message
</div>

@code { 
    InOutEntity oInOut = new InOutEntity();

    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string message;

    string buttonValue => oInOut.IsInput ? "Registrar entrada " : "Registrar salida";

    protected override async Task OnInitializedAsync()
    {
        warehouses = B_Warehouse.WarehouseList();
    }

    private void OnChangedWareHouse(ChangeEventArgs e)
    {
        var idWarehouse = e.Value.ToString();
        storages = B_Storage.StorageProductsByWarehouse(idWarehouse);

    }

    private void SaveInOut()
    {

        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if (oInOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            B_Storage.UpdateStorage(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            B_Product.UpdateProduct(oProduct);

            message = $"El producto {oProduct.ProductName} ha sido actualizado";
        }
        else
        {
            if (IsBiggerThanZero(oInOut.Quantity, oStorage.PartialQuantity))
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
                B_Storage.UpdateStorage(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                B_Product.UpdateProduct(oProduct);

                message = $"El producto {oProduct.ProductName} ha sido actualizado";
            }

            else
            {
                message = $"No existe la cantidad suficiente en bodega para el producto {oProduct.ProductName}";
            }
        }
    }


    private bool IsBiggerThanZero(int quantity, int storateQuantity)
    {
        if (storateQuantity > quantity)
        {
            return true;
        }

        return false;
    }




}